1. Tell the React Life Cycle?

Phases of React Lifecycle:

# Mounting Phase: The component is being created and inserted into the DOM.
# Updating Phase:  The component's state or props have changed, causing a re-render.
# Unmounting Phase: The component is being removed from the DOM.
# Error Handling Phase: If an error occurs during rendering, in lifecycle methods, or in the constructors of any child components, this method can catch the error.

2. what are hooks in react ? Mention some hooks?

Hooks are functions that allow functional components to use state and lifecycle features without writing a class.

# useState:	Manages component state
# useEffect:	Handles side effects
# useContext:	Accesses global state
# useRef:	Works with DOM elements & persists values
# useReducer:	Manages complex state logic
# useCallback:	Memoizes functions to prevent re-creation
# useMemo:	Memoizes expensive calculations
# useLayoutEffect:	Similar to useEffect, but runs synchronously after DOM updates
# useImperativeHandle:	Customizes ref behavior when using forwardRef

3. what are the advantages of React?

# Component-Based Architecture: Reusable UI components. Easy to maintain and scale.
# Virtual DOM: Fast rendering. Only updates the changed part of UI.
# One-Way Data Binding: Predictable data flow. Easy debugging and testing.
# JSX (JavaScript + HTML): Easy to write UI code. Clean & readable syntax.
# Strong Community & Ecosystem: Large open-source support. Many ready-to-use libraries.
# SEO Friendly: Supports Server Side Rendering (SSR) with Next.js.
# Easy Integration: Can be integrated with existing projects (even non-React apps).
# Developer Tools: React Dev Tools for easy debugging.
# Cross-Platform Development : React Native for mobile apps using same React knowledge.


4. what is UseRef and CreateRef ? 

Feature	            useRef	                            createRef
Used in	            Functional components	            Class components
Returns	            A stable ref across renders	        A new ref on each call
Persistence	        Yes (across renders)	            No (unless in constructor)
Use case	        Mutable values, DOM refs	        DOM refs in class components

5. what is Obj.freeze and obj.seal?

# Object.freeze()
Makes an object completely immutable.
You cannot add, delete, or change any property.
Properties become non-writable and non-configurable.

# Object.seal()
You cannot add or delete properties.
But you can modify existing properties (if they're writable).
Properties become non-configurable but can remain writable.

6. what is React portal?
used to render a component outside the DOM hierarchy of its parent component, useful for UI elements like modals, popups, tooltips, and overlays.

They help in situations where CSS positioning or interaction needs to be managed independently of the parent component.

Portals do not change the component hierarchy in React; they simply render the component outside the DOM structure but maintain the component's context and functionality.

7. what is UseTransition?

useTransition helps manage concurrent rendering by allowing React to keep the UI responsive even when expensive state updates are happening in the background. It allows you to tell React that certain updates can be deferred and do not need to block immediate rendering.

8. what is Difference between UseEffect and UseLayoutEffect?

# useEffect 
runs after the component renders and paints. It doesn't block the browserâ€™s painting process. It is useful for side effects that don't affect the layout directly.

# useLayoutEffect 
runs before the browser paints. It can block painting until the effect has been executed, which makes it suitable for DOM measurements and synchronously updating the layout.

9. what is StrictMode in react?

It helps with:
Identifying unsafe lifecycles
Warning about deprecated APIs
Detecting unexpected side effects
Double-invoking certain functions in development to surface hidden issues (only in dev mode!)

10. difference between React and React-dom?

1. react Package
The react package contains the core React library.

It includes:
React components
useState, useEffect, useRef, useContext, etc. (all hooks)
Virtual DOM functionality
createElement, Fragment, memo, and JSX support

2. react-dom Package
The react-dom package is specific to the web platform.

It provides:
DOM-specific methods to render React components into the actual HTML DOM
ReactDOM.createRoot() (from React 18)
Portals (createPortal)
findDOMNode() (less used now)

# What is Redux?
Redux = A library to manage data (state) in a bigger app.
-we use Redux to put all data in one central place (called "store")!
Then any component can get data from store â€” no need to pass props manually everywhere.

# âœ… In React, components also have lifecycle stages:
Mounting (Birth ðŸ‘¶): (Component is being created and inserted into the DOM)
Updating (Growth ðŸ§’):(Component is being re-rendered because of changes in props or state)
Unmounting (Death ): (Component is removed from the DOM)

Phase	            Meaning	                                          Example
Mounting	Component is created and added to screen.	        First time you open a page.
Updating	Component changes (because of props, state, etc.) and re-renders.	User types in input box, clicks button.
Unmounting	Component is removed from screen.	You move to a different page.

# error Handling
Error handling in React is important for ensuring that your application remains robust and doesnâ€™t crash unexpectedly when something goes wrong. 
- Handling Errors in Functional Components with useEffect:
In functional components, you can use useEffect with try-catch blocks for error handling, particularly for asynchronous operations like API calls.

# diff in react and react DOM
React	
React is the core library that provides the foundation for building user interfaces (UI).
React is not web-specific. It can be used to build apps for web, mobile (React Native), and other platforms.
Used in all React apps (including React Native)
Example Usage:useState, useEffect, component logic

react DOM
React DOM is a specific implementation of React for the web. It helps React render components to the web browser's DOM.
React DOM is only for the web. It handles rendering to browser DOM (HTML elements).
Used only in web apps to interact with the DOM
Example Usage:ReactDOM.render() to attach components to the DOM

# Strict Mode?
React Strict Mode is a tool used in React to help developers find potential problems in an app during development.
It doesnâ€™t affect the production build of the app, only during development.

ðŸŽ¯ What Does Strict Mode Do?
When you wrap parts of your app (or the entire app) in React.StrictMode, it enables additional checks and warnings in the development environment. These checks help you to identify:
    -Side effects that might not be safe (such as things that might lead to memory leaks).
    -Detecting unexpected side-effects or certain bad practices that can cause bugs.

# react portal ?
React Portals are a feature in React that allows you to render a component outside of 
its parent component's DOM hierarchy.
ðŸŽ¯ Why Use Portals?
Reactâ€™s default behavior is to render components inside their parent componentâ€™s DOM container,
but sometimes you need to render a child component outside the parentâ€™s DOM, while still maintaining
React's reactivity and event handling.

# What is JSX?
-JSX is a syntax that looks like HTML but is actually JavaScript.
-jSX (JavaScript XML) is a syntax extension for JavaScript used in React.
It allows you to write HTML-like code directly within your JavaScript code. 
JSX makes it easier to create and describe UI components by mixing the logic (JavaScript)
and presentation (HTML) together.

# 3. Explain the Virtual DOM in React.
The Virtual DOM is a lightweight copy of the actual DOM (Document Object Model) in the browser.
React keeps a virtual representation of the DOM in memory and uses it to optimize the process of updating the actual DOM.

# 4. What is React Context?
React Context is a feature that allows you to share values like state or functions across the entire component tree without having to pass them down through props.
It's useful when you have "global" data that many components need access to, such as user authentication or theme settings.

# 7. What is the difference between state and props in React?
state:
Managed within a component: The component itself controls the state (e.g., with useState).
Mutable: State can be changed, and updates will trigger a re-render.
Use case: Use state for values that can change during the lifetime of the component (e.g., user input, button clicks).

props:
Passed to a component from its parent: Props are immutable and cannot be modified by the component that receives them.
Immutable: You cannot change props directly in the child component.
Use case: Use props for data that is passed down from a parent component to a child component (e.g., user data, configuration settings).

# what is DOM
DOM(document object model)it is Just like tree structure that represent your web page inside the browser
