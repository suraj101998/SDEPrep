1. Functional Interfaces: 
Inteface which have one and only one abstract method.
Advantage: we can write a lamda expression which makes our code simple.
can we have public private or default methods in fuctional interface: Yes, but abstact method can only be one.

2. Java is compiled or Interpreted Language? 
both. Compiler convert source code into byteCode. This byteCode is Platform independent. 
Then JVM interprets bytecode line-by-line as per specific machine. JVM also uses Just in time compiler.
If a particular part of bytecode coming again and again JVM Converts this bytecode to machine level code to improve performance.

3. How to create a singleton class in java? 
Singleton Class: classes where we have one and only one instance of the class.
step1: make all the contructors private in nature.
step2: make public and static method to call the instance of this class.
step3: create private and static variable. 
If someone invokes your method, check if the variable is null or not. 
If it is null create a new instance, assign it to the variable and return the variable else simply return the variable.

4. difference between throw and throws keyword:
throw: used to throw an exception explicitiy within your method on meeting certain condition.
throws: used in the signature of the method itself denoting that method may throw specific kind of checked expressions.

5. what is object class:
default parent of all the java classes. 
Integral part of code and provides with certain method such as equals(), wait(), notify(), notifyAll(), toString() etc. 
At a time a class can extend only one class.

6. Difference between Immutable and mutable objects in java:
mutable: can modify the value once created. eg: StringBuilders
Immutable: cannot modify the value once created. eg: strings

7. what is HQL:
hibernate query language used to interact with database using hibernate queries. 
HQL uses classnames and variablenames.

8. How to create Immutable class in java: (assume all the fields are also Immutable)
step1: make class final so that one can inherit it.
step2: make all the fields private and final so that no one can modify them.
step3: remove all the setter method so that no one can set the values of variables.
step4: create parameterized constuctor which can intialize all fields when we are creating the objects.

9. what is final keyword in java:
used whenever we want to restrict from modifying the value.
can be used alongwith method: cannot override the method.
can be used alongwith class: cannot extend or inherit the class.
can be used alongwith the variable: cannot change the value of the variable.

10. what is static keyword in java:
The static keyword in Java is used to define members (fields and methods) that belong to the class. These members are shared among all instances of the class and can be accessed without creating an object.
Static Variables: Shared across all instances. They belong to the class, not individual objects.
Static Methods: Can be called without creating an object. They can only access static data or call other static methods.
Static Nested Class: A class defined within another class with the static keyword. It can be accessed without creating an instance of the enclosing class.

11. What is concurrency in Java?
ability of a program to execute multiple tasks simultaneously.It Provides:
Multithreading: Running multiple threads in a single program.
Synchronization: Mechanism to control the access of shared resources by multiple threads to avoid data inconsistency.
Thread Safety: Ensuring that shared data is accessed safely by multiple threads.

Java provides the java.util.concurrent package, which includes tools like ExecutorService, Semaphore, Lock, etc., to manage concurrency efficiently.

12.  What are threads in Java?
A thread in Java is a lightweight subprocess that enables parallel execution of tasks. Threads run within a single process and share the same memory space, allowing for efficient task management.
How to Create Threads:
By Extending the Thread Class.
By Implementing the Runnable Interface.

13. What are deadlocks in Java?
A deadlock in Java occurs when two or more threads are waiting for each other to release a resource, but none of them can proceed because they are all holding the resources the others need.

14. How to Achieve Deadlock in Concurrency?
To intentionally create a deadlock in Java:
Have two or more threads.
Use two or more shared resources (locks).
Ensure that one thread acquires one lock and waits for another lock, while the other thread does the opposite.

15. what are optional classes?
The Optional class in Java is a container that can hold either a value or null. part of the java.util package and is primarily used to represent optional (nullable) values in a more readable and safer way, reducing the chances of encountering NullPointerException.

16. what are stream API in java
provides a functional programming approach to process and manipulate collections of data in a declarative manner. It is a part of the java.util.stream package and is designed to work with data collections like lists, sets, or arrays. Streams make operations like filtering, mapping, and reducing data easier and more efficient.

17. what are lambda expressions in java?
 provide a concise way to represent a function or behavior as an argument. They enable functional programming by allowing you to write short, expressive code, particularly when working with functional interfaces.

18. synchronized and volatile in Java Multithreading?
# synchronized
The synchronized keyword ensures that only one thread at a time can access a synchronized block or method. It provides mutual exclusion and helps avoid race conditions.
Use Cases: To protect shared resources (like variables, objects, or blocks of code) from concurrent access.
Types:
Synchronized Method: Synchronizes the entire method.
Synchronized Block: Synchronizes only a portion of the code.

# volatile
The volatile keyword ensures that the value of a variable is always read from and written to the main memory, not from a thread’s local cache. It ensures visibility of updates across threads.
Use Cases: For variables that are shared across threads and subject to frequent updates.

19. Types of Interfaces in Java?
1. Functional Interface:
Contains only one abstract method and can be implemented using lambda expressions.
Example: Runnable, Comparator.

2. Marker Interface:
Does not have any methods and serves as a tag to convey metadata about a class.
Example: Serializable, Cloneable.

3. Normal Interface:
Can have multiple abstract methods and is implemented by classes.
Example: List, Map.

4. Nested Interface:
Defined inside another interface or class.
Example: Map.Entry.

5. SAM Interface (Single Abstract Method Interface):
A type of functional interface with a single abstract method.
Example: Callable, ActionListener.

6. Annotated Interface:
Defined with annotations like @FunctionalInterface to ensure it adheres to the functional interface contract.

20. What is Authentication and Authorization?
1. Authentication:
1)It is the process of verifying the identity of a user or system.
2)Ensures that the entity attempting to access the system is(authenticate or not) who they claim to be.
3)Example: Username and password verification, OTP, biometric checks, etc.

2. Authorization:
1)It is the process of determining whether a user has permission to access a resource or perform a specific action.
2)Happens after authentication.
3)Example: Granting or denying access to a file, API endpoint, or functionality based on user roles.

21. What is a JWT Token?
JWT (JSON Web Token) is a compact, URL-safe means of representing claims to be transferred between two parties. It is widely used for secure communication between a client and a server, especially in authentication and authorization scenarios.

Structure of JWT
A JWT token consists of three parts, separated by dots (.):

1. Header:
Contains metadata about the token, including the signing algorithm used.
Example:
{
  "alg": "HS256",
  "typ": "JWT"
}

2. Payload:
Contains the claims or data you want to transmit. This can include user information, roles, or permissions.
Example:
{
  "sub": "1234567890",
  "name": "John Doe",
  "role": "admin",
  "iat": 1516239022
}

3. Signature:
A cryptographic signature ensures the token hasn’t been tampered with. It’s created using the header, payload, and a secret key.
Example:
HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  secret
)

Final Token:
Header.Payload.Signature

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwicm9sZSI6ImFkbWluIn0.
SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

jwt token storing:

Client-side (Best Practice): Store in HTTP-only cookies for security.
Server-side (Cache like Redis): Use only if JWT revocation is required.

22. Difference Between Comparable and Comparator in Java
Both Comparable and Comparator are interfaces in Java used for sorting objects. 
Difference:
1. @Comparable
1)define the natural ordering of objects.
2)present in java.lang package.
3)Sorting logic is defined in the class itself.
4)method: compareTo(Object o)
5)Only one sorting logic can be defined.
6)syntax: class ClassName implements Comparable<ClassName>

2. @Comparator
1)define custom ordering of objects.
2)present in java.util package.
3)Sorting logic is defined in a separate class.
4)method: compare(Object o1, Object o2)
5)Multiple custom sorting logics can be defined.
6)syntax: class ClassName implements Comparator<AnotherClass>

23. what are Wrapper Classes in Java?
Wrapper classes are object representations of primitive types. Each primitive type has a corresponding wrapper class in Java.
Use Cases:
1. Collections Framework: 
Collections like ArrayList can only store objects, not primitives, so wrapper classes are needed.
2. Conversion: 
Convert between primitive types and objects 
Parse strings into primitives

24. Difference Between StringBuffer and StringBuilder?
1. StringBuffer
Mutability:  mutable (modifiable).
Thread Safety: Thread-safe, as its methods are synchronized.
Performance: Slower due to synchronization.
Usage: Use when thread safety is required.
2. StringBuilder
Mutability:  mutable (modifiable).
Thread Safety: Not thread-safe because it doesn’t synchronize methods.
Performance: Faster as it is not synchronized.
Usage: Use when thread safety is not needed.

25. Difference Between Final() and Finally() ?
1. final:
A keyword used to define constants, restrict inheritance, and prevent method overriding or variable reassignment.
Final Variable: Its value cannot be changed after initialization.
Final Method: Cannot be overridden by subclasses.
Final Class: Cannot be extended (subclassed).

2. finally:
A block used with a try-catch statement to ensure a block of code runs regardless of whether an exception is thrown or not.

26. Access Modifiers in Java
Access modifiers define the visibility or accessibility of classes, methods, and variables in Java.
Types:
public: Accessible from anywhere in the program.
protected: Accessible within the same package and by subclasses (even in different packages).
default (no modifier): Accessible only within the same package.
private: Accessible only within the same class.

27. what is OOPS in java?
OOP (Object-Oriented Programming) is a paradigm that uses objects and classes to design and develop applications. It makes code modular, reusable, and scalable by implementing core principles like encapsulation, inheritance, polymorphism, and abstraction.

Key OOP Concepts in Java
1. Class and Object:
Class: A blueprint for creating objects.
Object: An instance of a class with attributes and behaviors.
2. Encapsulation (Data Hiding)
Restrict direct access to class fields using private modifiers. achieved by Declaring the class variables as private and use public getters and setters to access/modify only the required private data.
3. Inheritance (Code Reusability)
Allows one class (child) to inherit properties of another class (parent).
    Types of Inheritance in Java:
    Single: A → B
    Multilevel: A → B → C
    Hierarchical: A → {B, C}
    Java does not support multiple inheritance using classes (avoids ambiguity).
4. Polymorphism (Many Forms)

        1. Method Overloading (Compile-time Polymorphism)
        Multiple methods with the same name but different parameters.

        class MathOperations {  
            int add(int a, int b) { return a + b; }  
            double add(double a, double b) { return a + b; }  
        }  
        public class Main {  
            public static void main(String[] args) {  
                MathOperations obj = new MathOperations();  
                System.out.println(obj.add(5, 10));  
                System.out.println(obj.add(5.5, 2.5));  
            }  
        }

        2. Method Overriding (Runtime Polymorphism)
        Child class redefines the method of the parent class.
        class Parent {  
          void show() {  
              System.out.println("Parent class");  
          }  
        }  
        class Child extends Parent {  
            void show() {  
                System.out.println("Child class");  
            }  
        }  
        public class Main {  
            public static void main(String[] args) {  
                Parent obj = new Child();  
                obj.show();  // Calls Child's show() due to runtime polymorphism  
            }  
        }

5. Abstraction (Hiding Implementation)
# Abstract Class: Cannot be instantiated, but can have abstract and non-abstract methods.
abstract class Vehicle {  
    abstract void start();  
    void display() {  
        System.out.println("Vehicle running");  
    }  
}  

class Car extends Vehicle {  
    void start() {  
        System.out.println("Car starts with a key");  
    }  
}  

public class Main {  
    public static void main(String[] args) {  
        Vehicle v = new Car();  
        v.start();  
        v.display();  
    }  
}

# Interface: Achieves full abstraction (100%), supports multiple inheritance.
interface Animal {  
    void sound();  
}  

class Dog implements Animal {  
    public void sound() {  
        System.out.println("Dog barks");  
    }  
}  

public class Main {  
    public static void main(String[] args) {  
        Animal obj = new Dog();  
        obj.sound();  
    }  
}

28. what is "Has-A" Relationship vs. "Is-A" Relationship in Java?
The two main types of relationships between classes define how objects interact are:

# "Has-A" Relationship (Composition or Aggregation)-  relationship where one class contains another class as a member.
Implemented using: Instance variables (composition or aggregation). Example: A Car has an Engine.

// Engine class (Used in Car)
class Engine {
    void start() {
        System.out.println("Engine is starting...");
    }
}

// Car class (Has an Engine)
class Car {
    private Engine engine; // Car "has-a" Engine
    public Car() {
        engine = new Engine();
    }
    void startCar() {
        engine.start(); // Using Engine's method
        System.out.println("Car is starting...");
    }
}

public class Main {
    public static void main(String[] args) {
        Car myCar = new Car();
        myCar.startCar();
    }
}


# "Is-A" Relationship (Inheritance)- relationship where one class inherits the properties and behavior of another class.
Implemented using: extends (for class inheritance) or implements (for interfaces). Example: A Dog is a Animal.

// Parent Class
class Animal {
    void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

// Child Class (inherits from Animal)
class Dog extends Animal {
    void bark() {
        System.out.println("Dog barks");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog d = new Dog();
        d.makeSound(); // Inherited method
        d.bark(); // Child class method
    }
}

29. What is SOLID Principles in Java?

help software developers create maintainable, scalable, and robust object-oriented systems.

S – Single Responsibility Principle (SRP)- class should have only one reason to change (i.e., one responsibility).
O – Open/Closed Principle (OCP)- class should be open for extension but closed for modification.
L – Liskov Substitution Principle (LSP)- subclass should be replaceable for its parent class without affecting the program's behavior.
I – Interface Segregation Principle (ISP)- No class should be forced to implement methods it does not use.
D – Dependency Inversion Principle (DIP)- High-level modules should not depend on low-level modules. Both should depend on abstractions (interfaces).

30. What is Garbage Collector?
is an automatic memory management process that removes objects that are no longer referenced to free up memory.

# importance:
Prevents memory leaks
Improves application performance
Eliminates the need for manual memory management

# working:
Java objects are stored in Heap Memory.
GC automatically detects unreachable objects.
GC removes these objects and reclaims memory.
The freed memory is reused for new object allocations.

# Phases:
Mark-	Identifies all objects that are reachable from active references.
Sweep-	Deletes unreferenced objects from heap memory.
Compact-	Rearranges remaining objects to optimize memory usage.

# Types of Garbage Collectors in Java
Serial GC:	Uses a single thread for GC	(Best for small applications (e.g., desktop apps)) : Mark-Sweep-Compact Algorithm Used
Parallel GC: Uses multiple threads for GC (Best for high-throughput applications) : Parallel Mark-Sweep Algorithm Used
CMS (Concurrent Mark-Sweep) GC:	Performs GC with minimal pause times (Best for low-latency applications) : Concurrent Mark-Sweep Algorithm Used
G1 (Garbage First) GC:	Divides heap into regions and cleans selectively (Best for large heaps (4GB+ memory)) : Region-based marking Algorithm Used
ZGC & Shenandoah GC:	Advanced low-latency GCs for large applications (Best for real-time applications) : Region-based concurrent Algorithm Used

31. what is Difference Between Heap and Stack Memory in Java?
# Stack:
Storage Type: Stores method calls, local variables, references
Allocation: Automatically allocated and deallocated
Speed: Faster(LIFO structure)	
Scope: Variables exist only within a method
Size Limit: Smaller size (fixed per thread)
Access: Direct access (stored in order)
Usage: Used for method execution
Stack memory is full: StackOverflowError

# Heap:
Storage Type:	Stores objects and instance variables
Allocation: Requires manual memory management (Garbage Collector)
Speed: Slower(Dynamic allocation)
Scope: Objects exist until GC removes them
Size Limit:	Larger size (can grow dynamically)
Access:	Accessed via object references
Usage:	Used for storing objects
Heap memory is full: OutOfMemoryError (OOM)

32. what is Diamond Thread proble in Java?  (related to multiple inheritance in OOP)
Diamond Problem occurs when multiple inheritance creates ambiguity in method resolution.
Java does not support multiple inheritance with classes to avoid this issue use interfaces.
   A
  / \
 B   C
  \ /
   D
Class B and Class C inherit from Class A.
Class D inherits from both B and C.
If A has a method, and B & C don’t override it, D gets two copies of the same method.
This creates ambiguity about which method should be called.

33. what is transient Keyword in Java?
used to prevent a field from being serialized when an object is written to a file or transmitted over a network. Prevents sensitive data (passwords, security tokens) from being stored.

34. what are the features of java 8?

# Lambda expressions : 
A concise way to represent a method interface using an expression
Allows you to treat functionality as a method argument
Lets you code as data

# Stream API 
A way to perform operations on collections of data in a functional way
Streams are a sequence of elements that can be processed in parallel or sequentially

# Date and Time API 
Includes classes like LocalDate, LocalTime, LocalDateTime, and ZonedDateTime
Provides a flexible framework for handling dates and times
Addresses the limitations of the old Date and Calendar classes

# Optional class 
A container object that is used to contain a value that might or might not be present

# Default methods
Allows you to add non-abstract methods in the interfaces
Provides backward compatibility to existing codebases when new methods are added to interfaces 

# forEach() Method 
Provides a new way to iterate over collections
Enhances code readability and reduces boilerplate code

# Concurrency API Improvements 
New classes for parallel processing (e.g., CompletableFuture)

35. what is Type Casting?
# converting a variable from one data type to another. Java provides two types of type casting:
# Implicit Casting (Widening Conversion): 
Occurs when a smaller type is converted to a larger type (e.g., from int to long). Java automatically handles this type of casting because it’s safe and won’t lose data.

# Explicit Casting (Narrowing Conversion): 
Occurs when a larger type is converted to a smaller type (e.g., from double to int). This kind of conversion requires the programmer to explicitly tell Java to perform the cast using parentheses (), as it might result in loss of data or precision.

# Casting Between Primitive Types
When converting between primitive data types, you can use either implicit or explicit casting, depending on the relationship between the types.

# Widening (Implicit): 
Smaller types are automatically promoted to larger types, as no data loss occurs.
Example: byte to short, short to int, int to long, float to double.

# Narrowing (Explicit): 
Larger types need to be explicitly cast to smaller types, as data loss might occur.
Example: double to float, int to short, long to int.

# Casting Between Object Types
Casting is also possible between object types, specifically when dealing with inheritance (i.e., when one class extends another). Here, you can cast between parent and child classes, but the cast must be valid according to the class hierarchy.
# Upcasting (Parent to Child) is implicit.
# Downcasting (Child to Parent) requires explicit casting.

# Wrapper Class Casting
 You can convert between wrapper classes and primitive types using autoboxing (primitive to wrapper) and unboxing (wrapper to primitive).

36. what is exception handling?

mechanism that allows a program to handle runtime errors (exceptions). It Prevents Crashes, Improves Debugging, Encapsulates Error Handling, Ensures Resource Management.

# Types of Exceptions in Java
1. Checked Exceptions – Must be handled using try-catch or declared with throws.
    Examples: IOException, SQLException

2. Unchecked Exceptions – Occur at runtime due to logical errors.
    Examples: NullPointerException, ArrayIndexOutOfBoundsException

3. Errors – Indicate serious problems that should not be caught.
    Examples: StackOverflowError, OutOfMemoryError

# How to Handle Exceptions?
Using try-catch Block
Handling Multiple Exceptions in a Single catch
Using finally Block
Using throws Keyword (Declaring Exceptions)
Custom Exceptions (extends Exception)

37. explain about Thread Life Cycle?
# New:	Thread is created but not started (new Thread()).
# Runnable:	Thread is ready to run but waiting for CPU (start()).
# Running:	Thread is currently executing (run()).
# Blocked / Waiting / Timed Waiting : A thread can enter these states if it needs to wait for another thread to complete an operation.
Blocked: 	Waiting for a lock (e.g., synchronized block).
Waiting: 	Waiting indefinitely for another thread to notify it (wait()).
Timed Waiting: 	Waiting for a specific time (sleep(time), join(time)).
# Terminated	Thread has finished execution or stopped.

38. explain the differences between Hashing and Encryption ? 

# Purpose: 	
Hashing Converts data to a fixed-length value for verification.	
Encryption Converts data into a secure format for confidentiality.

# Reversibility: 	
Hashing is Irreversible (One-way). 
Encryption is Reversible (Decryption possible)

# Use Case:	
Hashing used in Password storage, data integrity verification	
Encryption used in Data security in transmission and storage

# Key Usage	
For Hashing No key required	
For Encryption Requires encryption & decryption keys

# Examples	
Hashing algorithms: SHA-256, MD5, bcrypt	
Encryption algorithms: AES, RSA, DES

39. what is access token and refresh token?

In a secure authentication system, we use two types of JWT tokens:

# Access Token: Short-lived, used for API access.

# Refresh Token: Long-lived, used to obtain a new access token when it expires.

# How Access & Refresh Tokens Work
1. User logs in → Server returns Access Token + Refresh Token.
2. Client stores tokens (Access Token in memory, Refresh Token in HTTP-only cookies).
3. Client makes API requests → Sends Access Token in the Authorization header.
4. Access Token expires → Client sends a Refresh Token to get a new Access Token.
5. If Refresh Token is valid → Server issues a new Access Token.

# How It Works
Login API (/auth/login)
Takes username as input.
Returns Access Token (15 min) & Refresh Token (7 days).
Access API (with Authorization: Bearer <access_token>)
Token is validated in JwtAuthFilter.
User can access protected endpoints.
Refresh Token API (/auth/refresh)
Takes refreshToken as input.
Returns a new Access Token (if valid).
If Refresh Token is invalid → 401 Unauthorized.

Access Token: 	store in Memory / LocalStorage but is Exposed to XSS attacks.

Refresh Token: HTTP-only Cookies but is Safer, prevents XSS.