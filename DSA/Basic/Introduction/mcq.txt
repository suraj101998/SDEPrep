1. The sum of n natural numbers is : (n*(n+1))/2
2. Find the number of times below code runs where N is a perfect square

        for i -> 1 to N
        if(i * i == N)
        return i

        ans= sqrt(N)

3. How many iterations will take place?

    int func(int n){
        int s = 0;
        for(int i = 1 ; i <= 100 ; i++){ 
            s = s + i;
        }
        return s;
    }

    ans= 100

4. Find the number of iterations in the following code snippet:

        int ans = 0;
        for (int i = 0; i < n; i++)
        {
            ans += i * i;
        }

        No of interation = n

5. What will be the total number of iterations in the following code?

    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= i; j++) {
            print(i + j);
        }
    }

    No of Iterations= n*(n+1) / 2

6. How many elements are there between [135, 246] (inclusive of them) ? 112
7. Find the total number of iterations in the following code:
        void solve(int N, int M)
        {
            int count = 0;
            for (int i = 1; i <= N; i++)
            {
                if (N % i == 0)
                    count++;
            }
            for (int i = 1; i <= M; i++)
            {
                if (M % i == 0)
                    count++;
            }
            print count;
        }

        ans= N + M

8. Find the total number of iterations in the following code snippet:
    NOTE: ^ denotes power, not Bitwise XOR.
    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= 3 ^ i; j++)
        {
            print(i + j);
        }
    }
    ans = 3 + 9 + 27 + .... + 3^n times.